KMD
00000000:             ; 
00000000:             ; port_A      EQU   &10000000         ; statically define our address for the data port of the LC
                      ; D
00000000:             ; port_B      EQU   &10000004         ; statically define for the control port
00000000:             ; 
00000000:             ; bit_7       EQU   &80
00000000:             ; bit_6       EQU   &40
00000000:             ; bit_5       EQU   &20
00000000:             ; bit_4       EQU   &10
00000000:             ; bit_3       EQU   &8
00000000:             ; bit_2       EQU   &4                ; high on bit 2 (lcd r/w)
00000000:             ; bit_1       EQU   &2                ; high on bit 1 (lcd RS)
00000000:             ; bit_0       EQU   &1                ; high on bit 0 (lcd E)
00000000:             ; 
00000000: EA000003    ;             BAL Main
00000004: 48 65 6C 6C ; data        DEFB  'Hello\nworld!\0'
00000008: 6F 0A 77 6F ; 
0000000C: 72 6C 64 21 ; 
00000010: 00          ; 
00000011:             ; 
00000014:             ; ALIGN 4
00000014:             ; 
00000014: E28FD07C    ; Main        ADR   SP, Stack         ; initiailise stack pointer
00000018: E28DD00C    ;             ADD   SP, SP, #&c       ; our stack is only 3 words
0000001C: E24F2020    ;             ADR   R2, data        ; Move the start adr of our string into memory
00000020: E4D21001    ; next_byte   LDRB  R1, [R2], #1      ; load our byte and increment
00000024: E3510000    ;             CMP   R1, #0            ; are we at null byte? end of string?
00000028: 0A000019    ;             BEQ   Done
0000002C: EB000000    ;             BL    Write_char
00000030: EAFFFFFA    ;             BAL   next_byte
00000034:             ; 
00000034:             ; ; Procedure to write a single character (R1) to the LCD
00000034: E92D001C    ; Write_char  STMFD SP!, {R2, R3, R4}       ; push R2-4 to stack
00000038: E3802004    ; LCD_status  ORR   R2, R0, #bit_2    ; set r/w bit to 1
0000003C: E3C22002    ;             BIC   R2, R2, #bit_1    ; set RS=0
00000040: E3A03241    ;             MOV   R3, #port_B       ; copy address of port B into R3
00000044: E5432000    ;             STRB  R2, [R3]          ; write data to port B
00000048: E3822001    ; Enable_bus  ORR   R2, R2, #bit_0    ; set E=1
0000004C: E5432000    ;             STRB  R2, [R3]          ; write data to port B
00000050: E3A04201    ;             MOV   R4, #port_A       ; copy address of port A into R4
00000054: E5544000    ;             LDRB  R4, [R4]          ; read our status bytes
00000058: E3C22001    ;             BIC   R2, R2, #bit_0    ; set E=0
0000005C: E5432000    ;             STRB  R2, [R3]          ; write command back
00000060: E2044080    ;             AND   R4, R4, #bit_7
00000064: E2544080    ;             SUBS  R4, R4, #bit_7
00000068: 0AFFFFF6    ;             BEQ   Enable_bus        ; we are still busy, poll again
0000006C: E3C22004    ;             BIC   R2, R2, #bit_2    ; set r/w to 0
00000070: E3822002    ;             ORR   R2, R2, #bit_1    ; set rs to 1
00000074: E3A04201    ;             MOV   R4, #port_A       ; copy the adr of portA into R4
00000078: E5441000    ;             STRB  R1, [R4]          ; write our character
0000007C: E3822001    ;             ORR   R2, R2, #bit_0    ; set E=0
00000080: E5432000    ;             STRB  R2, [R3]          ; write command back
00000084: E3C22001    ;             BIC   R2, R2, #bit_0    ; set E=1
00000088: E5432000    ;             STRB  R2, [R3]
0000008C: E8BD001C    ;             LDMFD SP!, {R2, R3, R4} ; pop our registers back
00000090: E1A0F00E    ;             MOV   PC, LR            ; branch back
00000094:             ; 
00000094:             ; 
00000094: EAFFFFFE    ; Done        BAL   Done
00000098:             ; 
00000098:             ; 
00000098:             ; Stack       DEFS  3
0000009B:             ; 

Symbol Table: Labels
: port_A                            10000000  Value
: port_B                            10000004  Value
: bit_7                             00000080  Value
: bit_6                             00000040  Value
: bit_5                             00000020  Value
: bit_4                             00000010  Value
: bit_3                             00000008  Value
: bit_2                             00000004  Value
: bit_1                             00000002  Value
: bit_0                             00000001  Value
: data                              00000004  Local -- ARM
: Main                              00000014  Local -- ARM
: next_byte                         00000020  Local -- ARM
: Write_char                        00000034  Local -- ARM
: LCD_status                        00000038  Local -- ARM
: Enable_bus                        00000048  Local -- ARM
: Done                              00000094  Local -- ARM
: Stack                             00000098  Local -- ARM
