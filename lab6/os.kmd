KMD
00000000:             ; ;---------------------------------------------------------------------------
00000000:             ; ;       Matt Walton
00000000:             ; ;       Version 1.2
00000000:             ; ;       11th March 2019
00000000:             ; ;---------------------------------------------------------------------------
00000000:             ; 
00000000:             ; ; os.s
00000000:             ; ; This contains the basic 'operating system' code
00000000:             ; ; It initalises the devices, defines service routines,
00000000:             ; ; and also contains the device driver for the HD44780 LCD controller
00000000:             ; 
00000000:             ;               ORG   &0
00000000: EA000076    ;               B     Init_stacks       ; define what to do on reset
00000008:             ;               ORG   &8
00000008: EA00009A    ;               B     SVC_entry         ; define what to do on svc
00000018:             ;               ORG   &18
00000018: EA0000A4    ;               B     ISR_entry
0000001C: EA0000AE    ;               B     FIQ_entry
00000020:             ; 
00000020:             ; stack_size    EQU   &20               ; Define the stack size for all user modes
00000020:             ; 
00000020:             ; super_stack   DEFS  stack_size
00000040:             ; user_stack    DEFS  stack_size
00000060:             ; fiq_stack     DEFS  stack_size
00000080:             ; irq_stack     DEFS  stack_size
000000A0:             ; svc_stack     DEFS  stack_size
000000C0:             ; 
000000C0:             ; cpsr_sys      EQU   &1F
000000C0:             ; cpsr_svc      EQU   &13
000000C0:             ; cpsr_usr      EQU   &10
000000C0:             ; cpsr_fiq      EQU   &11
000000C0:             ; cpsr_irq      EQU   &12
000000C0:             ; 
000000C0:             ; irq_mask      EQU   &40
000000C0:             ; fiq_mask      EQU   &80
000000C0:             ; 
000000C0:             ; port_A        EQU   &10000000         ; statically define the base for the data port of the LCD
000000C0:             ; port_B_off    EQU   &00000004         ; define the adr of port B as an offset to port A
000000C0:             ; 
000000C0:             ; bit_7         EQU   &80
000000C0:             ; bit_6         EQU   &40
000000C0:             ; bit_5         EQU   &20
000000C0:             ; bit_4         EQU   &10
000000C0:             ; bit_3         EQU   &8
000000C0:             ; bit_2         EQU   &4
000000C0:             ; bit_1         EQU   &2
000000C0:             ; bit_0         EQU   &1
000000C0:             ; 
000000C0:             ; lcd_rw        EQU   bit_2
000000C0:             ; lcd_rs        EQU   bit_1
000000C0:             ; lcd_e         EQU   bit_0
000000C0:             ; 
000000C0:             ; cmd_clear     EQU   &1
000000C0:             ; 
000000C0:             ; base_adr      EQU   &10000000         ; base address for i/o
000000C0:             ; timer_ofs     EQU   &8                ; the address of the timer module
000000C0:             ; piob_ofs      EQU   &4                ; address of PIOB
000000C0:             ; ire_ofs       EQU   &1c               ; offset for interupt enable
000000C0:             ; ira_ofs       EQU   &18               ; offset for interrupt active
000000C0:             ; 
000000C0: 00000000    ; timer_ms      DEFW  0                 ; timer's count in ms
000000C4:             ; timer_inc     EQU   &100              ; when interrupt called, increase timer by 256ms
000000C4:             ; 
000000C4: 00000001    ; ir_enabled    DEFW  0b00000001        ; which interrupts to enable, for now just the timer is e
                      ; nabled
000000C8:             ; 
000000C8:             ; ir_ubutton    EQU   bit_6
000000C8:             ; ir_lbutton    EQU   bit_7
000000C8:             ; ir_timer      EQU   bit_0
000000C8:             ; 
000000C8:             ; svc_jmax      EQU   4
000000C8: 00000324    ; svc_jumps     DEFW  LCD_write         ; SVC 0 = LCD_write
000000CC: 0000038C    ;               DEFW  Timer_reset       ; SVC 1 = Timer_reset
000000D0: 00000378    ;               DEFW  Timer_read        ; SVC 2 = Timer_read
000000D4: 000003A4    ;               DEFW  Get_PIOB          ; SVC 3 = Get_PIOB
000000D8:             ; 
000000D8:             ;               ALIGN 4
000000D8:             ; 
000000D8:             ; INCLUDE       part2.s                 ; include our program code
000000D8:             ; ;---------------------------------------------------------------------------
000000D8:             ; ;       EX5: Counters and Timers (part 2)
000000D8:             ; ;       Matt Walton
000000D8:             ; ;       Version 1.0
000000D8:             ; ;       27th February 2019
000000D8:             ; ;
000000D8:             ; ;       This program implements a counter which counts up 1 per second
000000D8:             ; ;       and outputs onto the LCD display
000000D8:             ; ;
000000D8:             ; ;---------------------------------------------------------------------------
000000D8:             ; 
000000D8:             ; 
000000D8:             ; INCLUDE         lcd.s                         ; include our lcd library
000000D8:             ; ;---------------------------------------------------------------------------
000000D8:             ; ;       Matt Walton
000000D8:             ; ;       Version 1.0
000000D8:             ; ;       18th February 2019
000000D8:             ; ;
000000D8:             ; ;       This program implements my previous code for writing to an LCD
000000D8:             ; ;       but instead making sure the driver is run in supervisor mode
000000D8:             ; ;       and calls are made from user code to this via SVC calls.
000000D8:             ; ;
000000D8:             ; ;---------------------------------------------------------------------------
000000D8:             ; 
000000D8:             ; ; lcd.s
000000D8:             ; ; this provides functions to make calls to the LCD driver a bit nicer
000000D8:             ; 
000000D8:             ; lcd_code_clear  EQU   1
000000D8:             ; 
000000D8:             ; ; Procedure to write a character to the LCD using the SVC call
000000D8:             ; ; R0 = character
000000D8: E92D4003    ; LCD_Write_char  STMFD SP!, {LR, R1 ,R0}
000000DC: E1A01000    ;                 MOV   R1, R0            ; move our value at R0 to R1
000000E0: E3A00001    ;                 MOV   R0, #1            ; we want to write a character
000000E4: EF000000    ;                 SVC   0                 ; Call our service routine
000000E8: E8BD8003    ;                 LDMFD SP!, {PC, R1, R0}
000000EC:             ; 
000000EC:             ; 
000000EC:             ; ; Procedure to send a command to the LCD controller
000000EC:             ; ; R0 = cmd
000000EC: E92D4003    ; LCD_Write_cmd   STMFD SP!, {LR, R1 ,R0}
000000F0: E1A01000    ;                 MOV   R1, R0            ; move our value at R0 to R1
000000F4: E3A00000    ;                 MOV   R0, #0            ; we want to send a command
000000F8: EF000000    ;                 SVC   0                 ; Call our service routine
000000FC: E8BD8003    ;                 LDMFD SP!, {PC, R1, R0}
00000100:             ; 
00000100:             ; ; Procedure to write a string to the LCD
00000100:             ; ; R0 = start address of string
00000100:             ; ; The procedure will continue until a null byte string terminator is hit
00000100:             ; 
00000100: E92D4003    ; LCD_Write_str   STMFD SP!, {LR, R0, R1}     ; we're using R2, and want to push the LR to the st
                      ; ack
00000104: E1A01000    ;                 MOV   R1, R0            ; move R0 > R1
00000108: E4D10001    ; next_byte       LDRB  R0, [R1], #1      ; load our byte into R2 and increment
0000010C: E3500000    ;                 CMP   R0, #0            ; are we at null byte? end of string?
00000110: 0A000001    ;                 BEQ   wstr_dne
00000114:             ; 
00000114: EBFFFFEF    ;                 BL    LCD_Write_char
00000118: EAFFFFFA    ;                 BAL   next_byte
0000011C: E8BD8003    ; wstr_dne        LDMFD SP!, {PC, R0, R1}     ; pop our registers back and branch back
00000120:             ; 
00000120:             ; ; Procedure to clear the screen of the LCD
00000120: E92D4001    ; LCD_Clear       STMFD SP!, {LR, R0}
00000124: E3A00001    ;                 MOV   R0, #lcd_code_clear
00000128: EBFFFFEF    ;                 BL    LCD_Write_cmd
0000012C: E8BD8001    ;                 LDMFD SP!, {PC, R0}
00000130:             ; 
00000130: 00000000    ; counter         DEFW    0                     ; define our memory location for our counter
00000134:             ; 
00000134:             ; 
00000134: EF000001    ; Main            SVC     1                     ; reset counter
00000138: EF000002    ; counter_loop    SVC     2                     ; get counter reading
0000013C: EB000018    ;                 BL      Divide1000            ; convert into seconds
00000140: E24F1018    ;                 ADR     R1, counter           ; get counter address
00000144: E5111000    ;                 LDR     R1, [R1]              ; load counter value
00000148: E1500001    ;                 CMP     R0, R1                ; has the value changed?
0000014C: 0AFFFFF9    ;                 BEQ     counter_loop          ; no it hasn't
00000150: E24F1028    ;                 ADR     R1, counter           ; our value has changed
00000154: E5010000    ;                 STR     R0, [R1]              ; store back
00000158: EB000000    ;                 BL      Print                 ; print out
0000015C: EAFFFFF5    ;                 B       counter_loop          ; loop
00000160:             ; 
00000160:             ; 
00000160:             ; ; Print procedure
00000160:             ; ; R0 = number to print
00000160:             ; ; Pushes 5 values to stack which are the ascii digits
00000160: E92D4007    ; Print           STMFD   SP!, {LR, R0, R1, R2}
00000164: EBFFFFED    ;                 BL      LCD_Clear             ; clear the screen
00000168: E3A02005    ;                 MOV     R2, #5
0000016C: E2422001    ; print_bcd_loop  SUB     R2, R2, #1
00000170: EB000011    ;                 BL      Divide10
00000174: E2811030    ;                 ADD     R1, R1, #&30          ; add 30 for ascii
00000178: E92D0002    ;                 PUSH    {R1}                  ; push to stack
0000017C: E3520000    ;                 CMP     R2, #0
00000180: CAFFFFF9    ;                 BGT     print_bcd_loop        ; loop 5 times for each digit
00000184: E3A02005    ;                 MOV     R2, #5
00000188: E8BD0001    ; print_loop      POP     {R0}                  ; pop into R0
0000018C: EBFFFFD1    ;                 BL      LCD_Write_char        ; write to screen
00000190: E2422001    ;                 SUB     R2, R2, #1
00000194: E3520000    ;                 CMP     R2, #0
00000198: CAFFFFFA    ;                 BGT     print_loop            ; loop 5 times
0000019C: E8BD8007    ;                 LDMFD   SP!, {PC, R0, R1, R2}
000001A0:             ; 
000001A0:             ; ; Divide1000 procedure
000001A0:             ; ; R0 = number to divide
000001A0:             ; ; returns the divided value in R0
000001A0: 00418938    ; divisor1000     DEFW    &418938               ; ~2^32/1000
000001A4: E92D4006    ; Divide1000      STMFD   SP!, {LR, R1, R2}
000001A8: E24F1010    ;                 ADR     R1, divisor1000
000001AC: E5111000    ;                 LDR     R1, [R1]
000001B0: E0802190    ;                 UMULL   R2, R0, R0, R1        ; we're essentially doing n * 2^32/1000 then divi
                      ; ding by 2^32
000001B4: E8BD8006    ;                 LDMFD   SP!, {PC, R1, R2}
000001B8:             ; 
000001B8:             ; ; Divide10 procedure
000001B8:             ; ; R0 = number to divide
000001B8:             ; ; returns the divided value in R0, remainder in R1
000001B8: 1999999A    ; divisor10       DEFW    &1999999A             ; ~2^32/10
000001BC: E92D400C    ; Divide10        STMFD   SP!, {LR, R2, R3}
000001C0: E24F1010    ;                 ADR     R1, divisor10
000001C4: E5111000    ;                 LDR     R1, [R1]
000001C8: E0832190    ;                 UMULL   R2, R3, R0, R1        ; we're essentially doing n * 2^32/1000 then divi
                      ; ding by 2^32
000001CC: E3A0100A    ;                 MOV     R1, #10
000001D0: E0010193    ;                 MUL     R1, R3, R1            ; mul back by 10
000001D4: E0401001    ;                 SUB     R1, R0, R1            ; remainder into r1
000001D8: E1A00003    ;                 MOV     R0, R3                ; move divided value to R0
000001DC: E8BD800C    ;                 LDMFD   SP!, {PC, R2, R3}
000001E0:             ; 
000001E0:             ; 
000001E0:             ; 
000001E0:             ; ; OS procedure to initialise the supervisor and user stacks
000001E0: E24FDF6A    ; Init_stacks   ADR   SP, super_stack + stack_size    ; set stack pointer for supervisor
000001E4: E10F0000    ;               MRS   R0, CPSR                        ; load cpsr into r0
000001E8: E3C0001F    ;               BIC   R0, R0, #&1F                    ; clear mode field
000001EC: E380001F    ;               ORR   R0, R0, #cpsr_sys               ; set mode to system
000001F0: E12FF000    ;               MSR   CPSR, R0                        ; write back to CPSR
000001F4: E24FDF67    ;               ADR   SP, user_stack + stack_size     ; set SP for user
000001F8:             ; 
000001F8: E10F0000    ;               MRS   R0, CPSR                        ; load cpsr into r0
000001FC: E3C0001F    ;               BIC   R0, R0, #&1F                    ; clear mode field
00000200: E3800011    ;               ORR   R0, R0, #cpsr_fiq               ; set mode to FIQ
00000204: E12FF000    ;               MSR   CPSR, R0                        ; write back to CPSR
00000208: E24FDE19    ;               ADR   SP, fiq_stack + stack_size      ; set SP
0000020C:             ; 
0000020C: E10F0000    ;               MRS   R0, CPSR                        ; load cpsr into r0
00000210: E3C0001F    ;               BIC   R0, R0, #&1F                    ; clear mode field
00000214: E3800012    ;               ORR   R0, R0, #cpsr_irq               ; set mode to IRQ
00000218: E12FF000    ;               MSR   CPSR, R0                        ; write back to CPSR
0000021C: E24FDF61    ;               ADR   SP, irq_stack + stack_size      ; set SP
00000220:             ; 
00000220: E10F0000    ;               MRS   R0, CPSR                        ; load cpsr into r0
00000224: E3C0001F    ;               BIC   R0, R0, #&1F                    ; clear mode field
00000228: E3800013    ;               ORR   R0, R0, #cpsr_svc               ; set mode to SVC
0000022C: E12FF000    ;               MSR   CPSR, R0                        ; write back to CPSR
00000230: E24FDF5E    ;               ADR   SP, svc_stack + stack_size      ; set SP
00000234:             ; 
00000234:             ; ; OS procedure to enable FIQ AND IRQ interrupts
00000234: E10F0000    ; En_interrupts MRS   R0, CPSR                        ; enable on CPU
00000238: E3C00040    ;               BIC   R0, R0, #irq_mask               ; enable IRQ
0000023C: E3C00080    ;               BIC   R0, R0, #fiq_mask               ; enable FIQ
00000240: E12FF000    ;               MSR   CPSR, R0                        ; write back to CPSR
00000244: E24F0F62    ;               ADR   R0, ir_enabled                  ; load our enabled flags
00000248: E5100000    ;               LDR   R0, [R0]
0000024C: E3A01201    ;               MOV   R1, #base_adr                   ; load the interrupt enable address
00000250: E281101C    ;               ADD   R1, R1, #ire_ofs
00000254: E5010000    ;               STR   R0, [R1]                        ; do our interrupt enables
00000258:             ; 
00000258:             ; 
00000258:             ; ; OS procedure to initalise the LCD
00000258: E3A01001    ; Init_lcd      MOV   R1, #cmd_clear
0000025C: E3A00000    ;               MOV   R0, #0
00000260: EF000000    ;               SVC   0
00000264:             ; 
00000264: E10F0000    ; Init_program  MRS   R0, CPSR
00000268: E3C0001F    ;               BIC   R0, R0, #&1F
0000026C: E3800010    ;               ORR   R0, R0, #cpsr_usr               ; set mode to user
00000270: E12FF000    ;               MSR   CPSR, R0                        ; write back to CPSR
00000274: EAFFFFAE    ;               B     Main                            ; branch to program main
00000278:             ; 
00000278: E92D4000    ; SVC_entry     STMFD SP!, {LR}
0000027C: E51EE004    ;               LDR   R14, [LR, #-4]                   ; copy the calling inst (ret adr - 4) to R
                      ; 1
00000280: E3CEE4FF    ;               BIC   R14, R14, #&FF000000             ; mask off opcode
00000284: E35E0004    ;               CMP   R14, #svc_jmax                   ; validation of svc code
00000288: 5A000006    ;               BPL   svc_done                         ; svc code > max
0000028C: E35E0000    ;               CMP   R14, #0                          ; svc code < 0
00000290: 4A000004    ;               BMI   svc_done
00000294: E92D0001    ;               STMFD SP!, {R0}                        ; push r0
00000298: E24F0F76    ;               ADR   R0, svc_jumps                    ; get adr of jump table
0000029C: E080E10E    ;               ADD   R14, R0, R14 LSL #2              ; add R0 * 4
000002A0: E8BD0001    ;               LDMFD SP!, {R0}                        ; pop r0
000002A4: E51EF000    ;               LDR   PC, [R14]
000002A8:             ; 
000002A8: E8BD4000    ; svc_done      LDMFD SP!, {LR}
000002AC: E1B0F00E    ;               MOVS  PC, LR
000002B0:             ; 
000002B0:             ; ; Interrupt service routine entry point
000002B0: E24EE004    ; ISR_entry     SUB   LR, LR, #4                       ; correct the return address
000002B4: E92D4007    ;               STMFD SP!, {R0-R2, LR}                 ; Store working regs & return adr
000002B8: E3A01201    ;               MOV   R1, #base_adr                    ; check which interrupt fired
000002BC: E2811018    ;               ADD   R1, R1, #ira_ofs
000002C0: E5510000    ;               LDRB  R0, [R1]
000002C4: E3100001    ;               TST   R0, #ir_timer
000002C8: 0A000002    ;               BEQ   isr_done                         ; timer / no interrupt that we care about 
                      ; has fired
000002CC: E3C00001    ;               BIC   R0, R0, #ir_timer                ; clear the bit
000002D0: E5410000    ;               STRB  R0, [R1]                         ; store back, to aknowledge interrupt acce
                      ; ptance
000002D4: EB000021    ;               BL    Update_timer                     ; update timer by 256ms
000002D8:             ; 
000002D8: E8FD8007    ; isr_done      LDMFD SP!, {R0-R2, PC}^                ; restore & return
000002DC:             ; 
000002DC: E24EE004    ; FIQ_entry     SUB   LR, LR, #4                       ; correct the return address
000002E0: E92D4007    ;               STMFD SP!, {R0-R2, LR}                 ; Store working regs & return adr
000002E4:             ; 
000002E4: E8FD8007    ;               LDMFD SP!, {R0-R2, PC}^                ; restore & return
000002E8:             ; 
000002E8:             ; ; LCD DRIVER:
000002E8:             ; 
000002E8:             ; ; Procedure to check if the LCD is ready & wait until it is
000002E8: E92D4007    ; Wait_ready    STMFD SP!, {LR, R0, R1, R2}
000002EC: E3A00201    ;               MOV   R0, #port_A                 ; set R0 to adr of port A
000002F0: E5D01004    ;               LDRB  R1, [R0, #port_B_off]       ; load contents of port B
000002F4: E3811004    ;               ORR   R1, R1, #lcd_rw             ; set r/w bit to 1
000002F8: E3C11002    ;               BIC   R1, R1, #lcd_rs             ; set RS=0
000002FC: E5C01004    ;               STRB  R1, [R0, #port_B_off]       ; write cmd to port B
00000300: E3811001    ; wr_loop       ORR   R1, R1, #lcd_e              ; set E=1
00000304: E5C01004    ;               STRB  R1, [R0, #port_B_off]       ; write data to port B
00000308: E5502000    ;               LDRB  R2, [R0]                    ; read our status bytes
0000030C: E3C11001    ;               BIC   R1, R1, #lcd_e              ; set E=0
00000310: E5C01004    ;               STRB  R1, [R0, #port_B_off]       ; write command back
00000314: E2022080    ;               AND   R2, R2, #bit_7
00000318: E2522080    ;               SUBS  R2, R2, #bit_7
0000031C: 0AFFFFF7    ;               BEQ   wr_loop               ; we are still busy, poll again
00000320: E8BD8007    ;               LDMFD SP!, {PC, R0, R1, R2}       ; pop & return
00000324:             ; 
00000324:             ; ; procedure to either write a cmd or data to the lcd
00000324:             ; ; R0 (1/0) specifies the value of RS (0 - cmd, 1- data)
00000324:             ; ; R1 specifies the cmd/character
00000324: E92D400C    ; LCD_write     STMFD SP!, {LR, R2, R3}
00000328: EBFFFFEE    ;               BL    Wait_ready                  ; wait for lcd to be ready
0000032C: E3A02201    ;               MOV   R2, #port_A                 ; load adr of port A into R2
00000330: E5D23004    ;               LDRB  R3, [R2, #port_B_off]       ; load ctrl byte to r3
00000334: E3C33004    ;               BIC   R3, R3, #lcd_rw             ; set RW=0 (we're writing)
00000338: E3C33002    ;               BIC   R3, R3, #lcd_rs             ; clear rs
0000033C: E1833080    ;               ORR   R3, R3, R0 lsl #1           ; set RS=R0
00000340: E5C23004    ;               STRB  R3, [R2, #port_B_off]       ; store back in port B
00000344: E5421000    ;               STRB  R1, [R2]                    ; store our data
00000348: E3833001    ;               ORR   R3, R3, #lcd_e              ; set E=1
0000034C: E5C23004    ;               STRB  R3, [R2, #port_B_off]       ; store back
00000350: E3C33001    ;               BIC   R3, R3, #lcd_e              ; set E=0
00000354: E5C23004    ;               STRB  R3, [R2, #port_B_off]       ; store back
00000358: E8BD400C    ;               LDMFD SP!, {LR, R2, R3}
0000035C: EAFFFFD1    ;               B     svc_done
00000360:             ; 
00000360:             ; ; TIMER code
00000360:             ; 
00000360: E92D4007    ; Update_timer  STMFD   SP!, {LR, R0-R2}
00000364: E24F1FAB    ;               ADR     R1, timer_ms              ; load current ms timer
00000368: E5110000    ;               LDR     R0, [R1]
0000036C: E2800C01    ;               ADD     R0, R0, #timer_inc        ; add the increment to the timer
00000370: E5010000    ;               STR     R0, [R1]                  ; store back
00000374: E8BD8007    ;               LDMFD   SP!, {PC, R0-R2}          ; done
00000378:             ; 
00000378:             ; ; procudure to return the current elapsed ms since Timer_reset was called
00000378:             ; ; returns in R0
00000378: E92D4000    ; Timer_read    STMFD   SP!, {LR}
0000037C: E24F0FB1    ;               ADR     R0, timer_ms
00000380: E5100000    ;               LDR     R0, [R0]
00000384: E8BD4000    ;               LDMFD   SP!, {LR}                 ; return
00000388: EAFFFFC6    ;               B       svc_done
0000038C:             ; 
0000038C:             ; ; procedure to reset the timer to 0
0000038C: E92D4003    ; Timer_reset   STMFD   SP!, {LR, R0, R1}
00000390: E24F0FB6    ;               ADR     R0, timer_ms
00000394: E3A01000    ;               MOV     R1, #0
00000398: E5001000    ;               STR     R1, [R0]
0000039C: E8BD4003    ;               LDMFD   SP!, {LR, R0, R1}
000003A0: EAFFFFC0    ;               B       svc_done
000003A4:             ; 
000003A4:             ; 
000003A4:             ; ; button SVC routine
000003A4: E3A00241    ; Get_PIOB      MOV     R0, #(base_adr + piob_ofs)
000003A8: E5500000    ;               LDRB    R0, [R0]
000003AC: EAFFFFBD    ;               B       svc_done
000003B0:             ; 

Symbol Table: Labels
: stack_size                        00000020  Value
: super_stack                       00000020  Local -- ARM
: user_stack                        00000040  Local -- ARM
: fiq_stack                         00000060  Local -- ARM
: irq_stack                         00000080  Local -- ARM
: svc_stack                         000000A0  Local -- ARM
: cpsr_sys                          0000001F  Value
: cpsr_svc                          00000013  Value
: cpsr_usr                          00000010  Value
: cpsr_fiq                          00000011  Value
: cpsr_irq                          00000012  Value
: irq_mask                          00000040  Value
: fiq_mask                          00000080  Value
: port_A                            10000000  Value
: port_B_off                        00000004  Value
: bit_7                             00000080  Value
: bit_6                             00000040  Value
: bit_5                             00000020  Value
: bit_4                             00000010  Value
: bit_3                             00000008  Value
: bit_2                             00000004  Value
: bit_1                             00000002  Value
: bit_0                             00000001  Value
: lcd_rw                            00000004  Value
: lcd_rs                            00000002  Value
: lcd_e                             00000001  Value
: cmd_clear                         00000001  Value
: base_adr                          10000000  Value
: timer_ofs                         00000008  Value
: piob_ofs                          00000004  Value
: ire_ofs                           0000001C  Value
: ira_ofs                           00000018  Value
: timer_ms                          000000C0  Local -- ARM
: timer_inc                         00000100  Value
: ir_enabled                        000000C4  Local -- ARM
: ir_ubutton                        00000040  Value
: ir_lbutton                        00000080  Value
: ir_timer                          00000001  Value
: svc_jmax                          00000004  Value
: svc_jumps                         000000C8  Local -- ARM
: lcd_code_clear                    00000001  Value
: LCD_Write_char                    000000D8  Local -- ARM
: LCD_Write_cmd                     000000EC  Local -- ARM
: LCD_Write_str                     00000100  Local -- ARM
: next_byte                         00000108  Local -- ARM
: wstr_dne                          0000011C  Local -- ARM
: LCD_Clear                         00000120  Local -- ARM
: counter                           00000130  Local -- ARM
: Main                              00000134  Local -- ARM
: counter_loop                      00000138  Local -- ARM
: Print                             00000160  Local -- ARM
: print_bcd_loop                    0000016C  Local -- ARM
: print_loop                        00000188  Local -- ARM
: divisor1000                       000001A0  Local -- ARM
: Divide1000                        000001A4  Local -- ARM
: divisor10                         000001B8  Local -- ARM
: Divide10                          000001BC  Local -- ARM
: Init_stacks                       000001E0  Local -- ARM
: En_interrupts                     00000234  Local -- ARM
: Init_lcd                          00000258  Local -- ARM
: Init_program                      00000264  Local -- ARM
: SVC_entry                         00000278  Local -- ARM
: svc_done                          000002A8  Local -- ARM
: ISR_entry                         000002B0  Local -- ARM
: isr_done                          000002D8  Local -- ARM
: FIQ_entry                         000002DC  Local -- ARM
: Wait_ready                        000002E8  Local -- ARM
: wr_loop                           00000300  Local -- ARM
: LCD_write                         00000324  Local -- ARM
: Update_timer                      00000360  Local -- ARM
: Timer_read                        00000378  Local -- ARM
: Timer_reset                       0000038C  Local -- ARM
: Get_PIOB                          000003A4  Local -- ARM
